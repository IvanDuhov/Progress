/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.21
</auto-generated>
------------------------------------------------------------------------------ */

using SitefinityWebApp.Mvc.Models;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Security;
using System.Security.Principal;
using System.Web.Mvc;
using Telerik.Sitefinity;
using Telerik.Sitefinity.Data;
using Telerik.Sitefinity.DynamicModules;
using Telerik.Sitefinity.DynamicModules.Model;
using Telerik.Sitefinity.Lifecycle;
using Telerik.Sitefinity.Model;
using Telerik.Sitefinity.Modules.Libraries;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.News.Model;
using Telerik.Sitefinity.Personalization;
using Telerik.Sitefinity.RelatedData;
using Telerik.Sitefinity.Services;
using Telerik.Sitefinity.Services.Notifications;
using Telerik.Sitefinity.Utilities.TypeConverters;
using Telerik.Sitefinity.Versioning;

namespace SitefinityWebApp.Mvc.Controllers
{
    [ControllerToolboxItem(Name = "SuccessStory_MVC", Title = "SuccessStory", SectionName = "CustomWidgets")]
    public class SuccessStoryController : Controller, IPersonalizable
    {
        // GET: SuccessStory
        public ActionResult Index()
        {
            var model = new SuccessStoryModel();

            return View(model);
        }

        // Publish a new successStory item
        [HttpPost]
        public ActionResult CreateSuccessStory(SuccessStoryModel story)
        {
            // Set a transaction name and get the version manager
            var transactionName = "PublishNewStory";
            var versionManager = VersionManager.GetManager();

            // Set the culture name for the multilingual fields
            var cultureName = "en";
            Telerik.Sitefinity.Services.SystemManager.CurrentContext.Culture = new CultureInfo(cultureName);

            DynamicModuleManager dynamicModuleManager = DynamicModuleManager.GetManager(DynamicModuleManager.GetDefaultProviderName(), transactionName);
            dynamicModuleManager.Provider.SuppressSecurityChecks = true;
            Type successStoryType = TypeResolutionService.ResolveType("Telerik.Sitefinity.DynamicTypes.Model.SuccessStory.SuccessStory");
            DynamicContent successStoryItem = dynamicModuleManager.CreateDataItem(successStoryType);

            // This is how values for the properties are set
            successStoryItem.SetString("Title", story.Title, cultureName);
            successStoryItem.SetString("Description", story.Description, cultureName);
            successStoryItem.SetString("SummaryDescription", story.SummaryDescription, cultureName);
            successStoryItem.SetString("Company", story.Company, cultureName);
            successStoryItem.SetString("CompanyWebsite", story.CompanyWebsite, cultureName);
            successStoryItem.SetString("Industry", story.Industry, cultureName);
            successStoryItem.SetString("ProductsUsed", story.ProductsUsed, cultureName);

            LibrariesManager thumbnailManager = LibrariesManager.GetManager();

            // Get related item manager
            /*
            var thumbnailItem = thumbnailManager.GetImages().FirstOrDefault(i => i.Status == Telerik.Sitefinity.GenericContent.Model.ContentLifecycleStatus.Master);
            if (thumbnailItem != null)
            {
                // This is how we relate an item
                successStoryItem.CreateRelation(thumbnailItem, "Thumbnail");
            }
            */

            successStoryItem.SetString("UrlName", (story.Title + DateTime.Now.ToString()).UrlTokenEncode(), cultureName);
            successStoryItem.SetValue("PublicationDate", DateTime.UtcNow);

            // We can now call the following to publish the item
            ILifecycleDataItem publishedSuccessStoryItem = dynamicModuleManager.Lifecycle.Publish(successStoryItem);

            // You need to set appropriate workflow status
            successStoryItem.SetWorkflowStatus(dynamicModuleManager.Provider.ApplicationName, "Published");

            // Create a version and commit the transaction in order changes to be persisted to data store
            versionManager.CreateVersion(successStoryItem, true);
            TransactionManager.CommitTransaction(transactionName);

            CreateSubscriptionListAndAddSubscriber();

            return RedirectToAction("Index", story);
        }

        public static void CreateSubscriptionListAndAddSubscriber()
        {
            var context = new ServiceContext("myNotificationAccount", "MyCustomModule");
            var ns = SystemManager.GetNotificationService();

            // Creating subscribers for the email list
            ISubscriberRequest subscriber = new SubscriberRequestProxy()
            {
                Email = "duhovgames@gmail.com",
                FirstName = "First",
                LastName = "Last",
                ResolveKey = "unique-identifier-in-the-specified-context"
            };

            // ns.GetSubscriptionList() - getting an already made list if we have such

            ISubscriptionListRequest subscriptionList = new SubscriptionListRequestProxy()
            {
                Title = "SampleList",
                ResolveKey = "1",
                Description = "Sample subscirption lsit description."
            };

            //Persisting the subscription list
            var subscriptionListId = ns.CreateSubscriptionList(context, subscriptionList);
            ns.Subscribe(context, subscriptionListId, subscriber);

            var subjectTemplate = "Story notification";
            var bodyTemplate = "Hi, new story is published";

            IMessageTemplateRequest tmpl = new MessageTemplateRequestProxy()
            {
                Subject = subjectTemplate,
                BodyHtml = bodyTemplate
            };

            var templateId = ns.CreateMessageTemplate(context, tmpl);

            //Name of an existing profile
            var profileName = "Default";

            var job = new MessageJobRequestProxy()
            {
                MessageTemplateId = templateId,
                SubscriptionsListId = subscriptionListId,
                SenderProfileName = profileName
            };

            var cntxDictionary = new Dictionary<string, string>();
            cntxDictionary.Add("MergeData.Time", DateTime.UtcNow.ToString());

            var messageJobId = ns.SendMessage(context, job, cntxDictionary);
        }


        public ActionResult Try(SuccessStoryModel story)
        {
            return RedirectToAction("Index");
        }

        protected override void HandleUnknownAction(string actionName)
        {
            this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
        }
    }
}